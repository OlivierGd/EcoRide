-- init_db.sql - EcoRide Demo Database
-- Version pour Docker Hub
BEGIN;

-- Supprimer les tables si elles existent (pour éviter les erreurs)
DROP TABLE IF EXISTS password_reset_tokens CASCADE;
DROP TABLE IF EXISTS login_history CASCADE;
DROP TABLE IF EXISTS user_tokens CASCADE;
DROP TABLE IF EXISTS reviews CASCADE;
DROP TABLE IF EXISTS payments CASCADE;
DROP TABLE IF EXISTS credits_history CASCADE;
DROP TABLE IF EXISTS bookings CASCADE;
DROP TABLE IF EXISTS trips CASCADE;
DROP TABLE IF EXISTS vehicule CASCADE;
DROP TABLE IF EXISTS users CASCADE;

----------------------------------------------------------
-- 1. USERS
----------------------------------------------------------
CREATE TABLE users (
                       user_id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       lastname        VARCHAR(100),
                       firstname       VARCHAR(100),
                       email           VARCHAR(255) UNIQUE,
                       password        TEXT,
                       profile_picture TEXT,
                       ranking         NUMERIC DEFAULT 5.0,
                       credits         INTEGER DEFAULT 20,
                       role            INTEGER DEFAULT 1,
                       status          VARCHAR DEFAULT 'active',
                       created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

----------------------------------------------------------
-- 2. VEHICULE
----------------------------------------------------------
CREATE TABLE vehicule (
                          id_vehicule            INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          id_conducteur          INTEGER,
                          marque                 VARCHAR(250),
                          modele                 VARCHAR(250),
                          type_carburant         VARCHAR(250),
                          plaque_immatriculation VARCHAR(12) UNIQUE,
                          nbr_places             INTEGER DEFAULT 4,
                          actif                  BOOLEAN DEFAULT true,
                          date_creation          DATE NOT NULL DEFAULT CURRENT_DATE,
                          statut                 VARCHAR(20) DEFAULT 'actif'
                              CHECK (statut IN ('actif', 'inactif', 'supprime')),
                          date_suppression       TIMESTAMP
);

----------------------------------------------------------
-- 3. TRIPS
----------------------------------------------------------
CREATE TABLE trips (
                       trip_id             INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       driver_id           INTEGER NOT NULL,
                       vehicle_id          INTEGER NOT NULL,
                       start_city          VARCHAR(250) NOT NULL,
                       end_city            VARCHAR(250) NOT NULL,
                       departure_at        TIMESTAMP NOT NULL,
                       available_seats     SMALLINT NOT NULL,
                       price_per_passenger NUMERIC(6,2) NOT NULL,
                       comment             TEXT,
                       no_smoking          BOOLEAN NOT NULL DEFAULT true,
                       music_allowed       BOOLEAN NOT NULL DEFAULT true,
                       discuss_allowed     BOOLEAN NOT NULL DEFAULT true,
                       created_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                       status              VARCHAR(30) DEFAULT 'active',
                       start_location      VARCHAR(255),
                       end_location        VARCHAR(255),
                       estimated_duration  INTERVAL
);

----------------------------------------------------------
-- 4. BOOKINGS
----------------------------------------------------------
CREATE TABLE bookings (
                          booking_id     INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          trip_id        INTEGER NOT NULL,
                          user_id        INTEGER NOT NULL,
                          seats_reserved INTEGER NOT NULL,
                          created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                          status         VARCHAR(20) DEFAULT 'pending' NOT NULL
);

----------------------------------------------------------
-- 5. CREDITS_HISTORY
----------------------------------------------------------
CREATE TABLE credits_history (
                                 credit_id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                 user_id        INTEGER NOT NULL,
                                 amounts        NUMERIC(10,2) NOT NULL,
                                 date_credit    TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                 type           VARCHAR(50) DEFAULT 'achat',
                                 status         TEXT,
                                 created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                 balance_before INTEGER,
                                 balance_after  INTEGER,
                                 booking_id     INTEGER
);

----------------------------------------------------------
-- 6. PAYMENTS
----------------------------------------------------------
CREATE TABLE payments (
                          payment_id            INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          user_id               INTEGER NOT NULL,
                          trip_id               INTEGER,
                          booking_id            INTEGER,
                          type_transaction      VARCHAR(50) NOT NULL,
                          montant               NUMERIC(10,2) NOT NULL,
                          description           TEXT,
                          date_transaction      TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                          statut_transaction    VARCHAR(30) DEFAULT 'reserve',
                          commission_plateforme NUMERIC(10,2) DEFAULT 0,
                          balance_before        INTEGER,
                          balance_after         INTEGER
);

----------------------------------------------------------
-- 7. REVIEWS
----------------------------------------------------------
CREATE TABLE reviews (
                         review_id     INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                         trip_id       INTEGER NOT NULL,
                         booking_id    INTEGER NOT NULL,
                         user_id       INTEGER NOT NULL,
                         rating        INTEGER NOT NULL CHECK (rating BETWEEN 1 AND 5),
                         commentaire   TEXT,
                         date_review   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                         status_review VARCHAR(20) DEFAULT 'pending'
);

----------------------------------------------------------
-- FOREIGN KEYS
----------------------------------------------------------
-- Vehicule
ALTER TABLE vehicule ADD CONSTRAINT fk_vehicule_conducteur
    FOREIGN KEY (id_conducteur) REFERENCES users(user_id);

-- Trips
ALTER TABLE trips ADD CONSTRAINT fk_trips_driver
    FOREIGN KEY (driver_id) REFERENCES users(user_id);
ALTER TABLE trips ADD CONSTRAINT fk_trips_vehicle
    FOREIGN KEY (vehicle_id) REFERENCES vehicule(id_vehicule);

-- Bookings
ALTER TABLE bookings ADD CONSTRAINT fk_bookings_trip
    FOREIGN KEY (trip_id) REFERENCES trips(trip_id);
ALTER TABLE bookings ADD CONSTRAINT fk_bookings_user
    FOREIGN KEY (user_id) REFERENCES users(user_id);

-- Credits History
ALTER TABLE credits_history ADD CONSTRAINT fk_credits_user
    FOREIGN KEY (user_id) REFERENCES users(user_id);
ALTER TABLE credits_history ADD CONSTRAINT fk_credits_booking
    FOREIGN KEY (booking_id) REFERENCES bookings(booking_id);

-- Payments
ALTER TABLE payments ADD CONSTRAINT fk_payments_user
    FOREIGN KEY (user_id) REFERENCES users(user_id);
ALTER TABLE payments ADD CONSTRAINT fk_payments_trip
    FOREIGN KEY (trip_id) REFERENCES trips(trip_id);
ALTER TABLE payments ADD CONSTRAINT fk_payments_booking
    FOREIGN KEY (booking_id) REFERENCES bookings(booking_id);

-- Reviews
ALTER TABLE reviews ADD CONSTRAINT fk_reviews_trip
    FOREIGN KEY (trip_id) REFERENCES trips(trip_id);
ALTER TABLE reviews ADD CONSTRAINT fk_reviews_booking
    FOREIGN KEY (booking_id) REFERENCES bookings(booking_id);
ALTER TABLE reviews ADD CONSTRAINT fk_reviews_user
    FOREIGN KEY (user_id) REFERENCES users(user_id);

----------------------------------------------------------
-- INDEX POUR PERFORMANCES
----------------------------------------------------------
CREATE INDEX idx_vehicule_statut ON vehicule (statut);
CREATE INDEX idx_vehicule_conducteur_statut ON vehicule (id_conducteur, statut);
CREATE INDEX idx_payments_user_date ON payments (user_id, date_transaction DESC);

----------------------------------------------------------
-- DONNÉES DE TEST
----------------------------------------------------------

-- Utilisateurs de démonstration (mot de passe = "password")
INSERT INTO users (firstname, lastname, email, password, credits, role) VALUES
                                                                            ('Admin', 'EcoRide', 'admin@ecoride.com', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 100, 3),
                                                                            ('Jean', 'Dupont', 'chauffeur@ecoride.com', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 45, 2),
                                                                            ('Marie', 'Martin', 'passager@ecoride.com', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 20, 1),
                                                                            ('Pierre', 'Bernard', 'pierre@ecoride.com', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 30, 2);

-- Véhicules de démonstration
INSERT INTO vehicule (id_conducteur, marque, modele, type_carburant, plaque_immatriculation, nbr_places) VALUES
                                                                                                             (2, 'Tesla', 'Model 3', 'Électrique', 'AB-123-CD', 4),
                                                                                                             (2, 'Toyota', 'Prius', 'Hybride', 'EF-456-GH', 4),
                                                                                                             (4, 'Renault', 'Zoe', 'Électrique', 'IJ-789-KL', 4);

-- Trajets de démonstration
INSERT INTO trips (driver_id, vehicle_id, start_city, end_city, departure_at, available_seats, price_per_passenger, comment) VALUES
                                                                                                                                 (2, 1, 'Paris', 'Lyon', '2025-09-15 14:00:00', 3, 35.00, 'Trajet écologique en Tesla, très confortable !'),
                                                                                                                                 (2, 2, 'Lyon', 'Marseille', '2025-09-16 09:30:00', 2, 40.00, 'Conduite tranquille, arrêts possibles sur demande'),
                                                                                                                                 (4, 3, 'Marseille', 'Nice', '2025-09-17 16:00:00', 3, 25.00, 'Véhicule électrique, musique autorisée'),
                                                                                                                                 (2, 1, 'Paris', 'Bordeaux', '2025-09-20 08:00:00', 3, 60.00, 'Trajet longue distance, départ matinal');

-- Réservations d'exemple
INSERT INTO bookings (trip_id, user_id, seats_reserved) VALUES
                                                            (1, 3, 1),
                                                            (2, 3, 1),
                                                            (3, 3, 1);

-- Avis d'exemple
INSERT INTO reviews (trip_id, booking_id, user_id, rating, commentaire) VALUES
                                                                            (1, 1, 3, 5, 'Excellent trajet ! Conducteur ponctuel et véhicule très propre.'),
                                                                            (2, 2, 3, 4, 'Bon voyage, petit retard au départ mais bien rattrapé.');

COMMIT;

-- Résumé pour vérification
SELECT 'Utilisateurs:' as table_name, count(*) as count FROM users
UNION ALL SELECT 'Véhicules:', count(*) FROM vehicule
UNION ALL SELECT 'Trajets:', count(*) FROM trips
UNION ALL SELECT 'Réservations:', count(*) FROM bookings
UNION ALL SELECT 'Avis:', count(*) FROM reviews;